## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "DamageSimulatorW40K", # The Name of the package containing the App
pkg_title = "A ShinyApp to know what to expect when you shoot at things in W40K", # The Title of the package containing the App
pkg_description = "In this app, you can easily compute the damage output of any weapons against any targets.
Just use the sliders to adjust the parameters and it will produce data to help guide your decisions. It uses a binomial distribution with a probability computed with the parameters given. You'll be served graphs (probability density of the binomial for those of you stats enclined) giving you the probability to wound a certain amount of damages with some usefull extra stats displayed.", # The Description of the package containing the App
author_first_name = "AUTHOR_FIRST", # Your First Name
author_last_name = "AUTHOR_LAST", # Your Last Name
author_email = "AUTHOR@MAIL.COM", # Your Email
repo_url = NULL # The URL of the GitHub Repo (optional)
)
## Fill the DESCRIPTION ----
## Add meta data about your application
##
## /!\ Note: if you want to change the name of your app during development,
## either re-run this function, call golem::set_golem_name(), or don't forget
## to change the name in the app_sys() function in app_config.R /!\
##
golem::fill_desc(
pkg_name = "DamageSimulatorW40K", # The Name of the package containing the App
pkg_title = "A ShinyApp to know what to expect when you shoot at things in W40K", # The Title of the package containing the App
pkg_description = "In this app, you can easily compute the damage output of any weapons against any targets.
Just use the sliders to adjust the parameters and it will produce data to help guide your decisions.
It uses a binomial distribution with a probability computed with the parameters given.
You'll be served graphs (probability density of the binomial for those of you stats enclined)
giving you the probability to wound a certain amount of damages with some usefull extra stats displayed.", # The Description of the package containing the App
author_first_name = "Adrien", # Your First Name
author_last_name = "Foucal", # Your Last Name
author_email = "adrien.foucal@gmail.com", # Your Email
repo_url = "https://github.com/Adrien-Evo/DamageSimulatorW40K.git" # The URL of the GitHub Repo (optional)
)
## Set {golem} options ----
golem::set_golem_options()
## Create Common Files ----
## See ?usethis for more information
usethis::use_mit_license("Golem User") # You can set another license here
usethis::use_readme_rmd(open = FALSE)
# Note that `contact` is required since usethis version 2.1.5
# If your {usethis} version is older, you can remove that param
usethis::use_code_of_conduct(contact = "Golem User")
usethis::use_lifecycle_badge("Experimental")
usethis::use_news_md(open = FALSE)
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\Users\Adrien\Downloads\target.png")
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png")
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png", ext='png')
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png", ext="png")
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png")
# golem::remove_favicon() # Uncomment to remove the default favicon
#Vitaly Gorbachev
## Add helper functions ----
golem::use_utils_ui(with_test = TRUE)
golem::run_dev()
rstudioapi::navigateToFile("dev/02_dev.R")
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
library(testthat)
library(DamageSimulatorW40K)
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
#' Run the Shiny Application
#'
#' @param ... arguments to pass to golem_opts.
#' See `?golem::get_golem_options` for more details.
#' @inheritParams shiny::shinyApp
#'
#' @export
#' @importFrom shiny shinyApp
#' @importFrom golem with_golem_options
run_app <- function(
onStart = NULL,
options = list(),
enableBookmarking = NULL,
uiPattern = "/",
...
) {
with_golem_options(
app = shinyApp(
ui = app_ui,
server = app_server,
onStart = onStart,
options = options,
enableBookmarking = enableBookmarking,
uiPattern = uiPattern
),
golem_opts = list(...)
)
}
# Run the application
run_app()
shinyApp(ui = ui, server = server)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
library(shinytheme)
library(shinythemes)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::remove_favicon() # Uncomment to remove the default favicon
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png", ext ="png")
## Favicon ----
# If you want to change the favicon (default is golem's one)
golem::use_favicon("C:\\Users\\Adrien\\Downloads\\target.png")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
shiny::runApp('~/W40K/DamageSimulator/Test')
library(shiny); runApp('R/stats_calculator.R')
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
runApp('R/stats_calculator.R')
C:/Users/Adrien/Documents/W40K/DamageSimulator/Test/app.R
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
---
output: github_document
# Building a Prod-Ready, Robust Shiny Application.
#
# README: each step of the dev files is optional, and you don't have to
# fill every dev scripts before getting started.
# 01_start.R should be filled at start.
# 02_dev.R should be used to keep track of your development during the project.
# 03_deploy.R should be used once you need to deploy your app.
#
#
###################################
#### CURRENT FILE: DEV SCRIPT #####
###################################
# Engineering
## Dependencies ----
## Amend DESCRIPTION with dependencies read from package code parsing
## install.package('attachment') # if needed.
attachment::att_amend_desc()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module(name = "name_of_module1", with_test = TRUE) # Name of the module
golem::add_module(name = "name_of_module2", with_test = TRUE) # Name of the module
## Add helper functions ----
## Creates fct_* and utils_*
golem::add_fct("helpers", with_test = TRUE)
golem::add_utils("helpers", with_test = TRUE)
## External resources
## Creates .js and .css files at inst/app/www
golem::add_js_file("script")
golem::add_js_handler("handlers")
golem::add_css_file("custom")
golem::add_sass_file("custom")
## Add internal datasets ----
## If you have data in your package
usethis::use_data_raw(name = "my_dataset", open = FALSE)
## Tests ----
## Add one line by test you want to create
usethis::use_test("app")
# Documentation
## Vignette ----
usethis::use_vignette("DamageSimulatorW40K")
devtools::build_vignettes()
## Code Coverage----
## Set the code coverage service ("codecov" or "coveralls")
usethis::use_coverage()
---
output: github_document
# Sass code compilation
sass::sass(input = sass::sass_file("inst/app/www/custom.sass"), output = "inst/app/www/custom.css", cache = NULL)
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
